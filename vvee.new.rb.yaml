---
vite.config.js: |
  import { defineConfig } from "vite";
  import vue from "@vitejs/plugin-vue";
  import { resolve } from 'path';
  import AutoImport from 'unplugin-auto-import/vite'
  import Components from 'unplugin-vue-components/vite'
  import { ElementPlusResolver } from 'unplugin-vue-components/resolvers'

  export default defineConfig({
    base: "./",
    build: {
      cssCodeSplit: false,

      // debug
      sourcemap: true,
      minify: false
    },
    plugins: [
      vue(),
      AutoImport({
        resolvers: [ElementPlusResolver()],
      }),
      Components({
        resolvers: [ElementPlusResolver()],
      }),
    ],
  });
preload.js: |
  window.addEventListener("DOMContentLoaded", () => {
    const replaceText = (selector, text) => {
      const element = document.getElementById(selector);
      if (element) element.innerText = text;
    };

    for (const type of ["chrome", "node", "electron"]) {
      replaceText(`${type}-version`, process.versions[type]);
    }
  })
main.cjs: |
  const { app, BrowserWindow } = require("electron");
  const path = require("path");

  function createWindow() {
    const win = new BrowserWindow({
      width: 800,
      height: 600,
      webPreferences: {
        preload: path.join(__dirname, "preload.js"),
      },
    });

    win.loadFile(`${__dirname}/dist/index.html`)
  }

  app.whenReady().then(() => {
    createWindow();

    app.on("activate", () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
      }
    });
  });

  app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
      app.quit();
    }
  });
electron-builder.config.cjs: |+
  const fs = require('fs');
  const path = require('path');
  const yaml = require('yaml');

  const changelog_path = path.join(__dirname, 'CHANGELOG.yaml');
  const changelog_file = fs.readFileSync(changelog_path, 'utf8');
  const changelog_yaml = yaml.parse(changelog_file);

  function get_latest_version(changelog_yaml) {
    const version = changelog_yaml.version;
    return `${version.major}.${version.minor}`;
  }

  const build_version = get_latest_version(changelog_yaml);
  const config = {
    directories: {
      output: 'dist',
      buildResources: 'buildResources',
    },
    files: [
      'dist/assets/*',
      'dist/index.html',
      'preload.cjs',
      'main.cjs',
    ],
    extraMetadata: {
      version: build_version,
    },
  }

  module.exports = config
CHANGELOG.yaml: |+
  ---
  version:
    major: 0
    minor: 1
    patch: 0
