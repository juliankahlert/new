#!/usr/bin/env ruby
#
# MIT License
#
# Copyright (c) 2024 Julian Kahlert <90937526+juliankahlert@users.noreply.github.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

require 'optparse'

##### Module API #####

class ScaffoldModule
  def initialize(dir)
    @dir = dir
  end

  def run
    false
  end
end

class ScaffoldModuleBuilder
  def build(cfg)
    nil
  end

  def name
    nil
  end

  def self.register(builder)
    @registry ||= {}
    @registry[builder.name] = builder
  end

  def self.builder(cfg)
    @registry ||= {}
    @registry[cfg[:name]]
  end

  def self.available
    @registry.keys
  end
end

##### NEW CLI #####

def load_mods(directory_path)
  Dir.foreach(directory_path) do |file|
    next if file == '.' || file == '..'

    full_path = File.join(directory_path, file)

    next unless File.file?(full_path)
    next unless full_path.end_with?('.new.rb')

    require full_path
  end
  true
rescue
  false
end

def parse_args(argv)
  cfg = { :options => {} }
  opt_parser = OptionParser.new do |opts|
    opts.banner = 'Usage: new [options] TOOL DIR'

    opts.on('--opt KEY VALUE', 'A generic option') do |key|
      val = argv.shift
      if val.nil?
        puts opts
        exit(1)
      end
      cfg[:options][key.to_sym] = val
    end

    opts.on('-h', '--help', 'Prints this help') do
      puts opts
      exit(0)
    end

    opts.on('-l', '--list', 'List all available modules') do
      ScaffoldModuleBuilder.available().each do |m|
        puts m
      end
      exit(0)
    end
  end

  opt_parser.parse!(argv)
  cfg[:name] = argv.shift
  cfg[:dir] = argv.shift
  cfg[:dir] ||= '.'
  cfg
end

load_mods('.')
load_mods('/etc/new/module.d')

cfg = parse_args(ARGV)

builder = ScaffoldModuleBuilder.builder(cfg)
mod = builder.build(cfg)
mod.run
